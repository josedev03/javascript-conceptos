split('')
// retorna un array, separa un string segun los caracteres indicados

reverse()
// invierte las posiciones de los elementos de un array

join('')
//retorna un string, une los elementos de un array segun los caracteres indicados

charAt(posicion)
// retorna el caracter en la posicion indicada
"gato".charAt(0);
>> "g"

String.fromCharcode()
//metodo estatico, retorna un nuevo string con la representaciÃ³n de los caracteres ingresados como parametros
String.fromCharCode(65,66,67);
>> "ABC"

repeat(nCopias)
// construye y retorna una nueva cadena con el numero de copias del string desde el cual fue llamado
"dato".repeat(3);
>> "datodatodato"

concat(cadena1,cadena2,cadenaN)
// retorna una nueva cadena uniendo la cadena original (desde el cual fue llamado) a las cadenas que fueron pasadas como parametros
"frase".concat(" para", " concatenar");
>> "frase para concatenar"

******************************************************************************************************
*******************************************UTILS******************************************************

String.fromCodePoint(num1, ...., numN);
// metodo estatico, retorna un nuevo string con la representacion de caracteres ingresados como parametros
String.fromCodePoint(65,66,67);
>> "ABC"

miCadena.anchor('nombre_anchor')
// metodo para crear un anchor a partir de un string
let miCadena = 'texto a visualizar'
miCadena.anchor('nombre_anchor_html');
>> <a name="nombre_anchor_html">texto a visualizar</a>

miCadena.big()
// metodo para formatear y obtener un texto dentro de una etiqueta big
let miCadena = 'texto a visualizar';
miCadena.big()
>> <big>texto a visualizar</big>
